/////////////////////////////////////////////////////////////////////////
///	\file main.c
///	\brief This is the main program code.
///
///	\author Ronald Sousa (Opticalworm)
/////////////////////////////////////////////////////////////////////////
#include "common.h"
#include "Terminal/Terminal.h"


/////////////////////////////////////////////////////////////////////////
///	\brief Configure the MCU. set D7 to output the system clock
/////////////////////////////////////////////////////////////////////////
void HardwareSetup(void)
{
	//configure system pll to use the pll. the sytem clock to 48Mhz
	RCC->CR &= ~(RCC_CR_PLLON); // disable the PLL
	while(RCC->CR & RCC_CR_PLLRDY); // wait here until pll is ready

	RCC->CFGR = RCC->CFGR & (~RCC_CFGR_PLLMUL) | (RCC_CFGR_PLLMUL6); /* (6) */

	RCC->CR |= RCC_CR_PLLON; // enable PLL
	while(RCC->CR & RCC_CR_PLLRDY); // wait here until pll is ready


	// Setup the MCO to output the system clock
	RCC->AHBENR |= ((uint32_t)1<<17); // enable port A clock
	// configure port
	GPIOA->MODER  &= ~((uint32_t)0x3 << 16);    // clear moder
	GPIOA->MODER  |= ((uint32_t)0x2 << 16);    // set the PA_8 to alternative function
	GPIOA->OSPEEDR |= ((uint32_t)3 << 16);	// set to 50Mhz
	GPIOA->PUPDR &= ~((uint32_t)2 << 16);	// no pull up/down resistor

	RCC->CFGR &= ~((uint32_t)15<< 24);
	RCC->CFGR |= ((uint32_t)4<< 24);	// Set the MCO to output the system clock
}

/////////////////////////////////////////////////////////////////////////
///	\brief the first user code function to be called after the ARM M0
///	has initial.
/////////////////////////////////////////////////////////////////////////
void main(void)
{
	HardwareSetup();
	Tick_init();
	Led_Init();
	Temperature_Init();
	Terminal_Init(&SerialPort2);

    for ( ;; )
    {
    	Terminal_Monitor();

    }
}
