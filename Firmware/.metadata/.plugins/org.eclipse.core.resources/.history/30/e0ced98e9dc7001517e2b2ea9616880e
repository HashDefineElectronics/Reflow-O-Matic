///////////////////////////////////////////////////////////////////////////////
/// \file Serial_2.h
/// \author Ronald Sousa
/// \website www.HashDefineElectronics.com
/// \company Hash Define Electronics Ltd
/// \Created 08 May 2015
///
/// \brief  Defines MCU layer for UART 1
///
///
/// \setion Project Dependency
/// Compiler: Microchip XC32 v1.34
/// library: Microchip Harmony v1.03.01
/// IDE: Microchip MPLABX v2.26
///////////////////////////////////////////////////////////////////////////////
#include "../../common.h"
#include "FreeRTOS.h"
#include "queue.h"
#include "peripheral/usart/plib_usart.h"
#include "peripheral/int/plib_int.h"

///////////////////////////////////////////////////////////////////////////////
/// \brief This will allow the system to control the hardware line for CS
///////////////////////////////////////////////////////////////////////////////
#define DISABLE_RX_FLOW() PLIB_PORTS_PinSet(PORTS_ID_0, PORT_CHANNEL_B, PORTS_BIT_POS_13)

///////////////////////////////////////////////////////////////////////////////
/// \brief This will allow the system to control the hardware line for CS
///////////////////////////////////////////////////////////////////////////////
#define ENABLE_RX_FLOW() PLIB_PORTS_PinClear(PORTS_ID_0, PORT_CHANNEL_B, PORTS_BIT_POS_13)

///////////////////////////////////////////////////////////////////////////////
/// \brief Holds the current flow state
///////////////////////////////////////////////////////////////////////////////
static uint_fast8_t RXFlowState = true;

///////////////////////////////////////////////////////////////////////////////
/// \brief RETURNS the tx flow state. if the connected device wants to prevent
/// data been sent. LOW
///////////////////////////////////////////////////////////////////////////////
#define IS_TX_FLOW_STATE_ENABLE() !PLIB_PORTS_PinGet(PORTS_ID_0, PORT_CHANNEL_B, PORTS_BIT_POS_12)

///////////////////////////////////////////////////////////////////////////////
/// \brief Defines the receive buffer size.
/// This matches the WIFI module buffer and therefore ensure that we meet or
// perform better than the bottle neck
///////////////////////////////////////////////////////////////////////////////
#define RECEIVE_BUFFER_SIZE 1420


///////////////////////////////////////////////////////////////////////////////
/// \brief Defines the trigger point before we clear the CS line
///////////////////////////////////////////////////////////////////////////////
#define RECEIVE_CS_LOW_TRIGGER (RECEIVE_BUFFER_SIZE/4)

///////////////////////////////////////////////////////////////////////////////
/// \brief Defines the trigger point before we set the CS line
///////////////////////////////////////////////////////////////////////////////
#define RECEIVE_CS_HIGH_TRIGGER (RECEIVE_BUFFER_SIZE - RECEIVE_CS_LOW_TRIGGER )

///////////////////////////////////////////////////////////////////////////////
/// \brief Keeps track if the serial port is configure and opend
///////////////////////////////////////////////////////////////////////////////
static uint_fast8_t IsOpenFlag = false;

///////////////////////////////////////////////////////////////////////////////
/// \brief Holds the serial baud rate
///////////////////////////////////////////////////////////////////////////////
static uint_fast8_t Baudrate = 9600;

///////////////////////////////////////////////////////////////////////////////
/// \brief if defined, then the uart baud high speed mode is set and 
/// configure.
///////////////////////////////////////////////////////////////////////////////
#define EN_HIGH_SPEED_MODE

///////////////////////////////////////////////////////////////////////////////
/// \brief return the serial open state
///
/// \return true = the serial port is open else false
///////////////////////////////////////////////////////////////////////////////
static uint_fast8_t IsSerialOpen(void)
{
    return IsOpenFlag;
}

/////////////////////////////////////////////////////////////////////////
///	\brief	The queue used to hold data from Uart
/////////////////////////////////////////////////////////////////////////
static QueueHandle_t SerialQueue = 0;

///////////////////////////////////////////////////////////////////////////////
/// \brief Open the serial port.
///
/// \param baudrate set the serial port baud rate
///
/// \return true = success else port is already open
///////////////////////////////////////////////////////////////////////////////
static uint_fast8_t Open(uint32_t baudrate)
{
    if (!IsOpenFlag)
    {
        PLIB_PORTS_PinDirectionInputSet(PORTS_ID_0, PORT_CHANNEL_B, PORTS_BIT_POS_12);  // IO2 - Yellow - RTS - INPUT
        PLIB_PORTS_PinDirectionOutputSet(PORTS_ID_0, PORT_CHANNEL_B, PORTS_BIT_POS_13);  // IO1 - GREEN - CTS -> OUPUT
        PLIB_PORTS_RemapInput(PORTS_ID_0, INPUT_FUNC_U1RX, INPUT_PIN_RPA4 );
        PLIB_PORTS_RemapOutput(PORTS_ID_0, OUTPUT_FUNC_U1TX, OUTPUT_PIN_RPB4 );
        ENABLE_RX_FLOW();
        RXFlowState = true;

        //Initialise the UART queue
	SerialQueue = xQueueCreate(RECEIVE_BUFFER_SIZE, sizeof(uint8_t));
	// Make sure the queue was created
	while (!SerialQueue) ;

        Baudrate = baudrate;

        U1MODEbits.ON = false; // set the baudrate mode

        #ifdef EN_HIGH_SPEED_MODE
            U1MODEbits.BRGH = true; // set the baudrate mode
            Baudrate = ((SYS_CLK_BUS_PERIPHERAL_1/(4*Baudrate)) - 1);
        #else
            U1MODEbits.BRGH = false; // set the baudrate mode
            Baudrate = ((SYS_CLK_BUS_PERIPHERAL_1/(16*Baudrate)) - 1);
        #endif

        U1BRG = Baudrate; // set the baud rate to 2Mbps

        U1STA &= ~(1<<6) & ~(1<<7); // enable interrupt on every byte received


        U1STA |= (1<<10) | (1<<12); // enble tx and rx
        
        PLIB_INT_SourceEnable(INT_ID_0, INT_SOURCE_USART_1_RECEIVE);
        PLIB_INT_VectorPrioritySet(INT_ID_0, INT_VECTOR_UART1, INT_PRIORITY_LEVEL2);
        PLIB_INT_VectorSubPrioritySet(INT_ID_0, INT_VECTOR_UART1, INT_SUBPRIORITY_LEVEL0);

        U1MODEbits.ON = true; // set the baudrate mode
        IsOpenFlag = true;
        return true;
    }

    // error. Port is already open
    return false;
}

///////////////////////////////////////////////////////////////////////////////
/// \brief Open the serial port
///
/// \return true = success else port is already open
///////////////////////////////////////////////////////////////////////////////
static void Close(void)
{
    // Set the CS line as input. this will ensure that its left in a safe state
    PLIB_PORTS_PinDirectionInputSet(PORTS_ID_0, PORT_CHANNEL_B, PORTS_BIT_POS_13);  // IO1 - Green
    U1MODEbits.ON = false; // set the baudrate mode
    IsOpenFlag = false;
    ENABLE_RX_FLOW();
    RXFlowState = true;
}

///////////////////////////////////////////////////////////////////////////////
/// \brief Send a single byte
///
/// \return true = success else port is not open
///////////////////////////////////////////////////////////////////////////////
uint_fast8_t SendByte(uint8_t source)
{
    if (IsOpenFlag)
    {
        while( ( U1STA & (1<<9) ) ); // wait until we have space to send the byte

        while( !IS_TX_FLOW_STATE_ENABLE() ) ; // wait until we can send data

        U1TXREG = source;
        
        return true;
    }
    
    return false;
}

///////////////////////////////////////////////////////////////////////////////
/// \brief Write a string
///
/// \param source pointer to the string to write. must end with null
///
/// \return true = success else either the port is not open or the pointer
/// to the array is invalid.
///////////////////////////////////////////////////////////////////////////////
uint_fast8_t SendString(const uint8_t *source)
{
    if (IsOpenFlag && source)
    {
        while(*source)
        {
            if (!SendByte(*source) )
            {
                return false;
            }
            source++;
        }
        return true;
    }
    return false;
}

///////////////////////////////////////////////////////////////////////////////
/// \brief Write an array of bytes
///
/// \param source pointer to the array to transmit.
/// \param length is the size of the array
///
/// \return true = success else either the port is not open or the pointer
/// to the array is invalid.
///////////////////////////////////////////////////////////////////////////////
uint_fast8_t SendArray(const uint8_t *source, uint32_t length)
{
    if (IsOpenFlag && source)
    {
        for ( ; length ; length--)
        {
            if ( !SendByte(*source) )
            {
                return false;
            }
            source++;
        }
        return true;
    }
    return false;
}

///////////////////////////////////////////////////////////////////////////////
/// \brief return the serial receive byte buffer state
///
/// \return      1 = we have data
///              0 = no data to read
///             -1 = Port is not open
///////////////////////////////////////////////////////////////////////////////
static int_fast8_t DoesReceiveBufferHaveData(void)
{
    if (IsOpenFlag)
    {
        if ( uxQueueMessagesWaiting( SerialQueue ) )
        {
            return true;
        }

        return false;
    }
    return -1;
}

///////////////////////////////////////////////////////////////////////////////
/// \brief serial port for reading serial byte
///
/// \param destionation pointer to return the newly read byte.
///
/// \return      1 = success on reading a byte
///              0 = no data to read or
///             -1 = Port is not open or the dstination pointer is invalid
///////////////////////////////////////////////////////////////////////////////
static int_fast8_t GetByte(uint8_t *destination)
{
    int_fast8_t Result = -1; // set it to port no connected state

    // Receive Buffer Overrun Error Status bit. if set then clear it
    if ( U1STA & (1<<1) )
    {
        U1STA &= ~(1<<1);
    }

    if (IsOpenFlag && destination)
    {
        if(pdTRUE != xQueueReceive(SerialQueue, destination, ((TickType_t ) 100)) )
        {
                // Nothing received, so quit
                Result = 0;
        }
        else
        {
            Result = 1;
        }

    }

    // the ReceiveBuffer needs to be clear before we reset the CS line
    if (uxQueueMessagesWaiting( SerialQueue ) < RECEIVE_CS_LOW_TRIGGER)
    {
        RXFlowState = true;
        ENABLE_RX_FLOW();
    }

    return Result;
}

void __ISR(_UART_1_VECTOR, ipl1AUTO) vU1InterruptWrapper( void );

void _UART1_InterruptHandler(void)
{
    uint8_t DataTemp;
    uint_fast8_t RXFlowStateBackup = RXFlowState;
    static portBASE_TYPE xHigherPriorityTaskWoken;
    xHigherPriorityTaskWoken = pdFALSE;

    DISABLE_RX_FLOW();
   
    DataTemp = U1RXREG;

    //Send the buffer to the queue - if the queue is full then we will just quit
    xQueueSendFromISR(SerialQueue, &DataTemp, &xHigherPriorityTaskWoken);

        
    PLIB_INT_SourceFlagClear(INT_ID_0, INT_SOURCE_USART_1_RECEIVE);
    

    if (uxQueueMessagesWaitingFromISR( SerialQueue )  > RECEIVE_CS_HIGH_TRIGGER)
    {
        RXFlowState = false;
        DISABLE_RX_FLOW();
    }
    else if(RXFlowStateBackup)
    {
        ENABLE_RX_FLOW();
    }

    portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
}

///////////////////////////////////////////////////////////////////////////////
/// \brief Defines the standard serial functions for uart 1
///
/// /sa SerialInterface
///////////////////////////////////////////////////////////////////////////////
SerialInterface SerialPort1 = {
                                    IsSerialOpen,
                                    Open,
                                    Close,
                                    SendByte,
                                    SendString,
                                    SendArray,
                                    DoesReceiveBufferHaveData,
                                    GetByte
                                };
