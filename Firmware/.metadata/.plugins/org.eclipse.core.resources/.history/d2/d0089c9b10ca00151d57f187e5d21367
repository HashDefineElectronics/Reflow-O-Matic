///////////////////////////////////////////////////////////////////////////
/// \file OvenControl.cpp
/// \brief Handles controller the temperature of the oven. this will also control the cooling fan
/// \author Ronald Sousa
///////////////////////////////////////////////////////////////////////////
#include "common.h"
#include "configuration.h"

///////////////////////////////////////////////////////////////////////////
/// \brief Defines the PID parameter for the heater
///////////////////////////////////////////////////////////////////////////
PIDType HeaterPID = {HeaterPID_P, HeaterPID_I, HeaterPID_D, 0, 0};

///////////////////////////////////////////////////////////////////////////////
/// \brief set the process update rate to 100ms
///////////////////////////////////////////////////////////////////////////////
static TickType ProcessUpdateRate = { 0 , 1000} ;

static float TargetTemperature = 0;
static float PWMOutput = 0;

///////////////////////////////////////////////////////////////////////////
/// \brief Configures the hardware to
///////////////////////////////////////////////////////////////////////////
void OvenControl_Init(void)
{
	Temperature_Init();
	PID_Init();
	PWM_Init(1, 0); // set to 1hz and set motors to off

}

void OvenControl_Process(float *currentTemp, float *currentTagetTemp, float *heaterPWM)
{
	float temperature = 0;

	Temperature_Read(&temperature, 0, 0);
	PWMOutput =  PID_Process(&HeaterPID, TargetTemperature, temperature);

	PWM_SetDuty(PWMPin2, PWMOutput);

	if ( currentTemp )
	{
		*currentTemp = temperature;
	}

	if ( currentTagetTemp )
	{
		*currentTagetTemp = TargetTemperature;
	}

	if ( heaterPWM )
	{
		*heaterPWM = PWMOutput;
	}

}

void OvenControl_SetTemperature(float temperature)
{
	TargetTemperature = temperature;
}



